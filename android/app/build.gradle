
apply plugin: "com.android.application"

apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
  /* Folders */
  //   The root of your project, i.e. where "package.json" lives. Default is '../..'
  // root = file("../../")
  //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
  // reactNativeDir = file("../../node_modules/react-native")
  //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
  // codegenDir = file("../../node_modules/@react-native/codegen")
  //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
  // cliFile = file("../../node_modules/react-native/cli.js")

  /* Variants */
  //   The list of variants to that are debuggable. For those we're going to
  //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
  //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
  // debuggableVariants = ["liteDebug", "prodDebug"]

  /* Bundling */
  //   A list containing the node command and its flags. Default is just 'node'.
  // nodeExecutableAndArgs = ["node"]
  //
  //   The command to run when bundling. By default is 'bundle'
  // bundleCommand = "ram-bundle"
  //
  //   The path to the CLI configuration file. Default is empty.
  // bundleConfig = file(../rn-cli.config.js)
  //
  //   The name of the generated asset file containing your JS bundle
  // bundleAssetName = "MyApplication.android.bundle"
  //
  //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
  // entryFile = file("../js/MyApplication.android.js")
  //
  //   A list of extra flags to pass to the 'bundle' commands.
  //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
  // extraPackagerArgs = []

  /* Hermes Commands */
  //   The hermes compiler command to run. By default it is 'hermesc'
  // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
  //
  //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
  // hermesFlags = ["-O", "-output-source-map"]

  /* Autolinking */
  autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' } // Gradle Plugin Portal
    }
    dependencies {
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.6, 0.13.0]'
    }
}



project.ext.envConfigFiles = [
        debug: ".env",
        release: ".env",
        stagingrelease: ".env.staging",
        productionrelease: ".env.production"
]
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
//  referencia : https://facebook.github.io/react-native/docs/signed-apk-android#enabling-proguard-to-reduce-the-size-of-the-apk-optional
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'
def useIntlJsc = true;


android {

    ndkVersion rootProject.ext.ndkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  compileSdk rootProject.ext.compileSdkVersion


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
  namespace "br.com.lanup.app"
    defaultConfig {
        applicationId "br.com.lanup.app"
        minSdkVersion 24
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 44
        versionName "2.5.2"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        missingDimensionStrategy 'react-native-camera', 'general'
        manifestPlaceholders = [
            onesignal_app_id: '974fc0c7-12f6-4d7a-8aca-c07d519c7dc1',
            onesignal_google_project_number: 'REMOTE',

        ]
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            // signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        stagingrelease {
            initWith release
            matchingFallbacks = ['release']
        }
        productionrelease {
            initWith release
            matchingFallbacks = ['release']
        }
    }
    // applicationVariants are e.g. debug, release

    packagingOptions {
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/x86/libjsc.so'
        pickFirst '**/armeabi-v7a/libjsc.so'
    }
}

dependencies {
  implementation project(':react-native-background-fetch')
  implementation project(':react-native-android-location-enabler')
  implementation project(':react-native-webview')
  // implementation project(':@sentry_react-native')
  // So, make sure you also include that repository in your project's build.gradle file.
  implementation 'com.google.android.play:asset-delivery:2.2.2'

  // For Kotlin users also add the Kotlin extensions library for Play Asset Delivery:
  implementation 'com.google.android.play:asset-delivery-ktx:2.2.2'
  implementation 'com.google.android.play:feature-delivery:2.1.0'

  // For Kotlin users, also add the Kotlin extensions library for Play Feature Delivery:
  implementation 'com.google.android.play:feature-delivery-ktx:2.1.0'
  implementation 'com.google.android.play:review:2.0.2'

  // For Kotlin users, also add the Kotlin extensions library for Play In-App Review:
  implementation 'com.google.android.play:review-ktx:2.0.2'
  implementation 'com.google.android.play:app-update:2.1.0'

  // For Kotlin users, also add the Kotlin extensions library for Play In-App Update:
  implementation 'com.google.android.play:app-update-ktx:2.1.0'
  implementation project(':react-native-onesignal:')
  implementation 'com.google.code.gson:gson:2.11.0'
  implementation 'org.jetbrains:annotations:23.0.0'
  implementation 'com.google.android.material:material:1.12.0'
  implementation 'com.android.support:multidex:1.0.3'

  implementation 'com.facebook.soloader:soloader:0.12.1'
  implementation 'com.facebook.react:react-android'




  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
}



